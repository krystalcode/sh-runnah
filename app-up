#!/bin/bash
#
# Starts services.

source /usr/local/bin/app-env-build

# Run the pre-up script, if it exists.
if [ -f $PWD/podman/pre-up.sh ]; then
    echo "Running pre-up script ..."
    source $PWD/podman/pre-up.sh
fi

# Create a pod that will hold contain all services.
#
# @I Support dependent services
#    type     : feature
#    priority : normal
#    labels   : service
p pod exists ${APP_CONTAINER_POD_NAME}
if [ $? -eq 0 ]; then
    echo "Pod already exists"
else
    echo "Creating the pod ..."
    POD_COMMAND="p pod create --replace --name ${APP_CONTAINER_POD_NAME}"

    # Expose any requested ports.
    for port in ${APP_CONTAINER_PORTS_ARRAY[*]}
    do
        POD_COMMAND="${POD_COMMAND} --publish $port"
    done

    # Add the pod to any requested networks.
    for network in ${APP_CONTAINER_NETWORKS_ARRAY[*]}
    do
        # Create the network first if it doesn't exist.
        p network exists $network
        if [ $? -eq 1 ]
        then
            p network create $network
        fi

        POD_COMMAND="${POD_COMMAND} --network $network"
    done

    if [ ! -v ${APP_CONTAINER_HOSTNAME+x} ]; then
        POD_COMMAND="${POD_COMMAND} --hostname ${APP_CONTAINER_HOSTNAME}"
    fi
    eval ${POD_COMMAND}
fi

if [ $# -eq 0 ]; then
    requested_service=""
else
    requested_service=$1
fi

# Run services.
# @I Declare variables as local
declare -a automatic_volumes
for service in ${APP_CONTAINER_SERVICES_ARRAY[*]}
do
    run=false
    if [ -z "${requested_service}" ]; then
        run=true
    elif [ "${service}" == "${requested_service}" ]; then
        run=true
    fi

    if [[ "${run}" = false ]]; then
        continue
    fi

    # Reset variables so that none are carried over from the last service.
    automatic_volumes=(
        "/etc/localtime:/etc/localtime:ro"
    )

    # Get the buildahfile path so that we can pass it to the build script.
    # The `up` script can then determine if we are running from a locally built
    # or a remote image.
    buildahfile=
    if [ -f $PWD/podman/services/$service/buildahfile ]; then
        buildahfile=$PWD/podman/services/$service/buildahfile
    elif [ -f $PWD/podman/$service.buildahfile ]; then
        buildahfile=$PWD/podman/$service.buildahfile
    elif [ -f /etc/app-pod/conf.d/services/default/$service.buildahfile ]; then
        buildahfile=/etc/app-pod/conf.d/services/default/$service.buildahfile
    fi

    read -r -d '' run_command << COMMAND
p run
  --detach
  --pod ${APP_CONTAINER_POD_NAME}
  --name ${APP_CONTAINER_POD_NAME}_$service
  --replace
  --env RUNNAH_SERVICE=${service}
COMMAND

    # Add runtime options to the command.
    runtime_options="APP_CONTAINER_${service^^}_RUNTIME_OPTIONS"
    if [ ! -z ${!runtime_options+x} ]; then
        IFS=',' read -r -a options <<< "${!runtime_options}"
        for option in ${options[*]}
        do
            run_command="${run_command} --${option}"
        done
    fi

    # Add environment variables to the service. Variables need to be prefixed
    # with "APP_CONTAINER_", followed by the capitalized service ID, then
    # "_ENV", then double underscore "__", and then the name of the environment
    # variable.
    # @I Support base64-encoded variables
    #    type     : improvement
    #    priority : low
    #    labels   : environment
    #    notes    : This is to support variables that cannot be parsed, such as
    #               private RSA keys. The encoded value should be added at
    #               `.env`, prefixed by `base64:`. We should then do the
    #               decoding it here.
    # @I Support loading variable value from file
    #    type     : improvement
    #    priority : low
    #    labels   : environment
    #    notes    : This is to support variables that cannot be parsed, such as
    #               private RSA keys. The value of the variable should be the
    #               absolute or relative path to the file that contains the
    #               value, prefixed by `file:`.
    variable_name_prefix="APP_CONTAINER_${service^^}_ENV__"
    variables=$(compgen -A variable | grep -E "^$variable_name_prefix.*")

    for variable in ${variables[*]}
    do
        variable_name=${variable#"$variable_name_prefix"}
        variable_value="${variable}"
        run_command="${run_command} --env ${variable_name}=${!variable_value}"
    done

    # @I Review services that have code for workdir and clean up
    #    type     : improvement
    #    priority : low
    #    labels   : service
    workdir="APP_CONTAINER_${service^^}_WORKDIR"
    if [ ! -z ${!workdir+x} ]; then
        run_command="${run_command} --workdir ${!workdir}"
    fi

    working_directory="APP_CONTAINER_${service^^}_WORKING_DIRECTORY"
    if [ ! -z ${!working_directory+x} ]; then
        automatic_volumes+=("${PWD}:${!working_directory}")
        run_command="${run_command} --workdir ${!working_directory}"
    fi

    # @I Move automatic volumes to a separate file as we add more
    #    type     : improvement
    #    priority : low
    #    labels   : structure
    atuin_profile="APP_CONTAINER_${service^^}_ATUIN_PROFILE"
    if [ ! -z ${!atuin_profile+x} ]; then
        printf '[DEBUG] %s %s\n' "${atuin_profile}" "${!atuin_profile}"
        atuin_profile_dir="${PODMAN_VOLUMES_DIR}/global/atuin/${!atuin_profile}"

        if [ -d ${atuin_profile_dir} ]; then
            atuin_data_dir="${APP_CONTAINER_VOLUMES_DIR}/atuin/${service/_/-}"
            if [ ! -d ${atuin_data_dir} ]; then
                mkdir "${atuin_data_dir}"
            fi
            printf '[DEBUG] %s %s\n' "${service}" "${atuin_data_dir}"
	    automatic_volumes+=(
                "${atuin_profile_dir}:/root/.config/atuin:ro"
                "${atuin_data_dir}:/root/.local/share/atuin"
            )
        else
            printf "[WARNING] No directory found for Atuin profile \"${!atuin_profile}\"\n"
	fi
    fi

    for volume in ${automatic_volumes[*]}
    do
        run_command="${run_command} --volume ${volume}"
    done

    image_name_variable_name="APP_CONTAINER_${service^^}_IMAGE_NAME"
    if [ -z ${!image_name_variable_name+x} ]; then
        image_name=""
    else
        image_name=${!image_name_variable_name}
    fi

    deprecated_variable_name="APP_CONTAINER_${service^^}_VERSION"
    if [ ! -z ${!deprecated_variable_name+x} ]; then
        echo "Please update your environment file to use APP_CONTAINER_${service^^}_IMAGE_VERSION instead of APP_CONTAINER_${service^^}_VERSION"
        exit 1
    fi

    image_version_variable_name="APP_CONTAINER_${service^^}_IMAGE_VERSION"
    if [ -z ${!image_version_variable_name+x} ]; then
        image_version=""
    else
        image_version=${!image_version_variable_name}
    fi

    if [ -z ${buildahfile} ]; then
        image="${image_name}:${image_version}"
    else
        image="${APP_CONTAINER_REGISTRY}/${APP_CONTAINER_POD_NAME}_${service}"
    fi

    # We first check if we have a folder dedicated to the service.
    if [ -f $PWD/podman/services/$service/up.sh ]; then
        echo "Starting service '$service' from custom start script"
        source $PWD/podman/services/$service/up.sh "$service" "$buildahfile" "$run_command" "$image_name" "$image_version" "${image}"

    # Otherwise we look for file in the general podman folder.
    elif [ -f $PWD/podman/$service.up.sh ]; then
        echo "Starting service '$service' from custom start script"
        source $PWD/podman/$service.up.sh "$service" "$buildahfile" "$run_command" "$image_name" "$image_version" "${image}"

    # If dedicated service files do not exist, it must be one of the supported
    # services.
    elif [ -f /etc/app-pod/conf.d/services/default/$service.up.sh ]; then
        echo "Starting service '$service' from default service-specific start script"
        source /etc/app-pod/conf.d/services/default/$service.up.sh "$service" "$buildahfile" "$run_command" "$image_name" "$image_version" "${image}"
    else
        echo "Starting service '$service' from default start script"
        source /etc/app-pod/conf.d/services/default/default.up.sh "$service" "$buildahfile" "$run_command" "$image_name" "$image_version" "${image}"
    fi
done

# Run the post-up script, if it exists.
if [ -f $PWD/podman/post-up.sh ]; then
    echo "Running post-up script ..."
    source $PWD/podman/post-up.sh
fi
